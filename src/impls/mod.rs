pub mod auth;
pub mod chat;
pub mod mediaproxy;
pub mod rest;
pub mod sync;

use std::time::{Duration, UNIX_EPOCH};

use harmony_rust_sdk::api::exports::{
    hrpc::{
        http,
        server::filters::{rate::Rate, rate_limit},
        warp::{self, filters::BoxedFilter, Filter, Reply},
    },
    prost::bytes::Bytes,
};
use parking_lot::Mutex;
use rand::Rng;
use reqwest::Response;
use smol_str::SmolStr;
use triomphe::Arc;

use crate::ServerError;

fn get_time_secs() -> u64 {
    UNIX_EPOCH
        .elapsed()
        .expect("time is before unix epoch")
        .as_secs()
}

fn gen_rand_inline_str() -> SmolStr {
    // Safety: arrays generated by gen_rand_arr are alphanumeric, so they are valid ASCII chars as well as UTF-8 chars [ref:alphanumeric_array_gen]
    let arr = gen_rand_arr::<_, 22>(&mut rand::thread_rng());
    let str = unsafe { std::str::from_utf8_unchecked(&arr) };
    // Safety: generated array is exactly 22 u8s long
    SmolStr::new_inline(str)
}

#[allow(dead_code)]
fn gen_rand_str<const LEN: usize>() -> SmolStr {
    let arr = gen_rand_arr::<_, LEN>(&mut rand::thread_rng());
    // Safety: arrays generated by gen_rand_arr are alphanumeric, so they are valid ASCII chars as well as UTF-8 chars [ref:alphanumeric_array_gen]
    let str = unsafe { std::str::from_utf8_unchecked(&arr) };
    SmolStr::new(str)
}

fn gen_rand_arr<RNG: Rng, const LEN: usize>(rng: &mut RNG) -> [u8; LEN] {
    let mut res = [0_u8; LEN];

    let random = rng
        .sample_iter(rand::distributions::Alphanumeric) // [tag:alphanumeric_array_gen]
        .take(LEN);

    random
        .zip(res.iter_mut())
        .for_each(|(new_ch, ch)| *ch = new_ch);

    res
}

fn gen_rand_u64() -> u64 {
    rand::thread_rng().gen_range(1..u64::MAX)
}

fn rate(num: u64, dur: u64) -> BoxedFilter<()> {
    rate_limit(
        Rate::new(num, Duration::from_secs(dur)),
        ServerError::TooFast,
    )
    .boxed()
}

fn get_mimetype(response: &Response) -> &str {
    response
        .headers()
        .get(&http::header::CONTENT_TYPE)
        .and_then(|val| val.to_str().ok())
        .and_then(|s| s.split(';').next())
        .unwrap_or("application/octet-stream")
}

fn get_content_length(response: &Response) -> http::HeaderValue {
    response
        .headers()
        .get(&http::header::CONTENT_LENGTH)
        .cloned()
        .unwrap_or_else(|| unsafe {
            http::HeaderValue::from_maybe_shared_unchecked(Bytes::from_static(b"0"))
        })
}

pub fn about(about_server: String, motd: Arc<Mutex<String>>) -> BoxedFilter<(impl Reply,)> {
    use harmony_rust_sdk::api::rest::About;

    const SCHERZO_VERSION: &str = git_version::git_version!(
        prefix = "git:",
        cargo_prefix = "cargo:",
        fallback = "unknown"
    );

    warp::get()
        .and(warp::path!("_harmony" / "about"))
        .map(move || {
            warp::reply::json(&About {
                server_name: "Scherzo".to_string(),
                version: SCHERZO_VERSION.to_string(),
                about_server: about_server.clone(),
                message_of_the_day: motd.lock().clone(),
            })
        })
        .boxed()
}
