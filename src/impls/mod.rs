pub mod auth;
pub mod batch;
pub mod chat;
pub mod emote;
pub mod mediaproxy;
pub mod profile;
pub mod rest;
pub mod sync;
pub mod voice;

use prelude::*;

use std::{
    future,
    str::FromStr,
    time::{Duration, UNIX_EPOCH},
};

use dashmap::DashMap;
use harmony_rust_sdk::api::{
    exports::{
        hrpc::{
            http,
            server::filters::{rate::Rate, rate_limit},
            warp::{self, filters::BoxedFilter, Filter, Reply},
        },
        prost::bytes::Bytes,
    },
    HomeserverIdParseError, HomeserverIdentifier,
};
use parking_lot::Mutex;
use rand::Rng;
use reqwest::Response;
use tokio::sync::{broadcast, mpsc};

use crate::{
    config::Config, impls::rest::reject, key, SharedConfig, SharedConfigData, SCHERZO_VERSION,
};

use self::{
    auth::AuthTree, chat::ChatTree, emote::EmoteTree, profile::ProfileTree, sync::EventDispatch,
};

pub mod prelude {
    pub use std::{convert::TryInto, mem::size_of};

    pub use crate::{
        db::{self, rkyv_arch, rkyv_ser, ArcTree, Batch, Db, DbResult, Tree},
        ServerError, ServerResult,
    };

    pub use harmony_rust_sdk::api::exports::{
        hrpc::{
            async_trait,
            server::{ServerError as HrpcServerError, Socket},
            Request,
        },
        prost::Message,
    };
    pub use rkyv::Deserialize;
    pub use scherzo_derive::*;
    pub use smol_str::SmolStr;
    pub use triomphe::Arc;

    pub use super::{auth::SessionMap, Dependencies};
}

pub type FedEventReceiver = mpsc::UnboundedReceiver<EventDispatch>;
pub type FedEventDispatcher = mpsc::UnboundedSender<EventDispatch>;

pub struct Dependencies {
    pub auth_tree: AuthTree,
    pub chat_tree: ChatTree,
    pub profile_tree: ProfileTree,
    pub emote_tree: EmoteTree,
    pub sync_tree: ArcTree,

    pub valid_sessions: SessionMap,
    pub chat_event_sender: chat::EventSender,
    pub fed_event_dispatcher: FedEventDispatcher,
    pub key_manager: Option<Arc<key::Manager>>,
    pub action_processor: ActionProcesser,

    pub config: Config,
    pub runtime_config: SharedConfig,
}

impl Dependencies {
    pub fn new(db: &dyn Db, config: Config) -> DbResult<(Self, FedEventReceiver)> {
        let (fed_event_dispatcher, fed_event_receiver) = mpsc::unbounded_channel();

        let auth_tree = AuthTree::new(db)?;

        let this = Self {
            auth_tree: auth_tree.clone(),
            chat_tree: ChatTree::new(db)?,
            profile_tree: ProfileTree::new(db)?,
            emote_tree: EmoteTree::new(db)?,
            sync_tree: db.open_tree(b"sync")?,

            valid_sessions: Arc::new(DashMap::default()),
            chat_event_sender: broadcast::channel(1000).0,
            fed_event_dispatcher,
            key_manager: config
                .federation
                .as_ref()
                .map(|fc| Arc::new(key::Manager::new(fc.key.clone()))),
            action_processor: ActionProcesser { auth_tree },

            config,
            runtime_config: Arc::new(Mutex::new(SharedConfigData::default())),
        };

        Ok((this, fed_event_receiver))
    }
}

fn get_time_secs() -> u64 {
    UNIX_EPOCH
        .elapsed()
        .expect("time is before unix epoch")
        .as_secs()
}

fn gen_rand_inline_str() -> SmolStr {
    // Safety: arrays generated by gen_rand_arr are alphanumeric, so they are valid ASCII chars as well as UTF-8 chars [ref:alphanumeric_array_gen]
    let arr = gen_rand_arr::<_, 22>(&mut rand::thread_rng());
    let str = unsafe { std::str::from_utf8_unchecked(&arr) };
    // Safety: generated array is exactly 22 u8s long
    SmolStr::new_inline(str)
}

#[allow(dead_code)]
fn gen_rand_str<const LEN: usize>() -> SmolStr {
    let arr = gen_rand_arr::<_, LEN>(&mut rand::thread_rng());
    // Safety: arrays generated by gen_rand_arr are alphanumeric, so they are valid ASCII chars as well as UTF-8 chars [ref:alphanumeric_array_gen]
    let str = unsafe { std::str::from_utf8_unchecked(&arr) };
    SmolStr::new(str)
}

fn gen_rand_arr<RNG: Rng, const LEN: usize>(rng: &mut RNG) -> [u8; LEN] {
    let mut res = [0_u8; LEN];

    let random = rng
        .sample_iter(rand::distributions::Alphanumeric) // [tag:alphanumeric_array_gen]
        .take(LEN);

    random
        .zip(res.iter_mut())
        .for_each(|(new_ch, ch)| *ch = new_ch);

    res
}

fn gen_rand_u64() -> u64 {
    rand::thread_rng().gen_range(1..u64::MAX)
}

fn rate(num: u64, dur: u64) -> BoxedFilter<()> {
    rate_limit(
        Rate::new(num, Duration::from_secs(dur)),
        ServerError::TooFast,
    )
    .boxed()
}

fn get_mimetype(response: &Response) -> &str {
    response
        .headers()
        .get(&http::header::CONTENT_TYPE)
        .and_then(|val| val.to_str().ok())
        .and_then(|s| s.split(';').next())
        .unwrap_or("application/octet-stream")
}

fn get_content_length(response: &Response) -> http::HeaderValue {
    response
        .headers()
        .get(&http::header::CONTENT_LENGTH)
        .cloned()
        .unwrap_or_else(|| unsafe {
            http::HeaderValue::from_maybe_shared_unchecked(Bytes::from_static(b"0"))
        })
}

pub fn about(deps: &Dependencies) -> BoxedFilter<(impl Reply,)> {
    use harmony_rust_sdk::api::rest::About;

    let about_server = deps.config.server_description.clone();
    let shared_config = deps.runtime_config.clone();

    warp::get()
        .and(warp::path!("_harmony" / "about"))
        .map(move || {
            warp::reply::json(&About {
                server_name: "Scherzo".to_string(),
                version: SCHERZO_VERSION.to_string(),
                about_server: about_server.clone(),
                message_of_the_day: shared_config.lock().motd.clone(),
            })
        })
        .boxed()
}

pub fn against_proxy() -> BoxedFilter<(impl Reply,)> {
    let http = reqwest::Client::new();

    let reject_header = |err| reject(ServerError::InvalidAgainst(err));

    warp::header::<String>("Against")
        .and_then(move |host_id_raw: String| {
            future::ready(HomeserverIdentifier::from_str(&host_id_raw).map_err(reject_header))
        })
        .and(warp::path::full())
        .and(warp::body::body())
        .and(warp::header::headers_cloned())
        .and(warp::method())
        .and_then(
            move |host_id: HomeserverIdentifier,
                  path: warp::path::FullPath,
                  body,
                  headers,
                  method| {
                let http = http.clone();
                async move {
                    use reqwest::Request;

                    let url = host_id
                        .to_url()
                        .map_err(reject_header)?
                        .join(path.as_str())
                        .map_err(|_| reject_header(HomeserverIdParseError::Malformed))?;
                    let mut request = Request::new(method, url);
                    *request.body_mut() = Some(reqwest::Body::wrap_stream(body));
                    *request.headers_mut() = headers;

                    let host_response = http.execute(request).await.map_err(reject)?;

                    let mut response = warp::reply::Response::default();
                    *response.headers_mut() = host_response.headers().clone();
                    *response.status_mut() = host_response.status();
                    *response.version_mut() = host_response.version();
                    *response.body_mut() =
                        warp::hyper::Body::wrap_stream(host_response.bytes_stream());

                    Result::<_, warp::Rejection>::Ok(response)
                }
            },
        )
        .boxed()
}

pub struct AdminActionError;

#[derive(Debug, Clone, Copy)]
pub enum AdminAction {
    GenerateRegistrationToken,
}

impl FromStr for AdminAction {
    type Err = AdminActionError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let act = match s.trim_start_matches('/').trim() {
            "generate registration-token" => AdminAction::GenerateRegistrationToken,
            _ => return Err(AdminActionError),
        };
        Ok(act)
    }
}

#[derive(Clone)]
pub struct ActionProcesser {
    auth_tree: AuthTree,
}

impl ActionProcesser {
    pub fn run(&self, action: &str) -> ServerResult<String> {
        let maybe_action = AdminAction::from_str(action);
        match maybe_action {
            Ok(action) => match action {
                AdminAction::GenerateRegistrationToken => {
                    let token = self.auth_tree.put_rand_reg_token()?;
                    Ok(token.into())
                }
            },
            Err(_) => Ok(format!("invalid command: `{}`", action)),
        }
    }
}
